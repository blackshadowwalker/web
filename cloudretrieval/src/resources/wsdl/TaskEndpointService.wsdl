<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions name="TaskEndpointService" targetNamespace="http://www.medianate.com/api/tasks" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://www.medianate.com/api/tasks" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
  <wsdl:types>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.resonate-mp4.com/medianate_edl" targetNamespace="http://www.resonate-mp4.com/medianate_edl" version="1.0">
<xs:element name="edl">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="sources">
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="source" nillable="true">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element minOccurs="0" name="metadata" type="tns:sourceMetadataType"/>
                  </xs:sequence>
                  <xs:attribute name="uri" type="xs:anyURI" use="required"/>
                  <xs:attribute name="localDownloadDirectory" type="xs:string"/>
                  <xs:attribute name="internalLocalPath" type="xs:string"/>
                  <xs:attribute name="beginTimecode" type="xs:string"/>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="destination">
          <xs:complexType>
            <xs:sequence/>
            <xs:attribute name="uri" type="xs:anyURI" use="required"/>
            <xs:attribute name="internalLocalPath" type="xs:string"/>
            <xs:attribute name="fileformat" type="tns:fileformatEnum"/>
            <xs:attribute name="muxerOptionalArgs" type="xs:string"/>
          </xs:complexType>
        </xs:element>
        <xs:element default="false" minOccurs="0" name="hint" type="xs:boolean"/>
        <xs:element default="false" minOccurs="0" name="httpdownloadable" type="xs:boolean"/>
        <xs:element minOccurs="0" name="assetinformation">
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="item" nillable="true" type="tns:assetInformationItemType"/>
            </xs:sequence>
            <xs:attribute name="behavior" type="tns:behaviorEnum" use="required"/>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="alternateinformation" type="tns:alternateInformationType"/>
        <xs:element minOccurs="0" name="cut" type="tns:cutType"/>
        <xs:element minOccurs="0" name="filters">
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="excludebitraterange" nillable="true" type="tns:bitrateRangeExclusionType"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="excludelang" nillable="true" type="tns:langExclusionType"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="analyze">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="videotracks" type="tns:videoAnalyzeType"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="process" nillable="true">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="videotracks" type="tns:videoProcessType"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="transcode">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="videotracks" type="tns:videoTranscodeType"/>
              <xs:element name="audiotracks" type="tns:audioTranscodeType"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="streaming">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="manifests" type="tns:manifestsType"/>
            </xs:sequence>
            <xs:attribute name="preferredSegmentDuration" type="xs:long" use="required"/>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="drm">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" name="videotracks" type="tns:drmInfoType"/>
              <xs:element minOccurs="0" name="audiotracks" type="tns:drmInfoType"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element maxOccurs="unbounded" minOccurs="0" name="userdata" nillable="true" type="tns:userdataType"/>
      </xs:sequence>
      <xs:attribute name="usecase" type="tns:useCaseEnum" use="required"/>
    </xs:complexType>
  </xs:element>
<xs:complexType name="sourceMetadataType">
    <xs:sequence>
      <xs:element minOccurs="0" name="takenDateTime" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="takenPostion" type="tns:geographicPositionType"/>
    </xs:sequence>
  </xs:complexType>
<xs:complexType name="geographicPositionType">
    <xs:sequence/>
    <xs:attribute name="latitude" type="xs:double" use="required"/>
    <xs:attribute name="longitude" type="xs:double" use="required"/>
  </xs:complexType>
<xs:complexType name="assetInformationItemType">
    <xs:sequence/>
    <xs:attribute name="category" type="tns:metadataCategoryEnum" use="required"/>
    <xs:attribute name="lang" type="tns:langEnum"/>
    <xs:attribute name="value" type="xs:string" use="required"/>
  </xs:complexType>
<xs:complexType name="alternateInformationType">
    <xs:sequence/>
    <xs:attribute name="videoswitchablebybandwidth" type="xs:boolean" use="required"/>
    <xs:attribute name="audioswitchablebylang" type="xs:boolean" use="required"/>
  </xs:complexType>
<xs:complexType name="cutType">
    <xs:sequence/>
    <xs:attribute name="begints" type="xs:long"/>
    <xs:attribute name="endts" type="xs:long"/>
  </xs:complexType>
<xs:complexType name="bitrateRangeExclusionType">
    <xs:sequence/>
    <xs:attribute name="mediatype" type="tns:mediaTypeEnum" use="required"/>
    <xs:attribute name="min" type="xs:int"/>
    <xs:attribute name="max" type="xs:int"/>
  </xs:complexType>
<xs:complexType name="langExclusionType">
    <xs:sequence/>
    <xs:attribute name="lang" type="tns:langEnum" use="required"/>
  </xs:complexType>
<xs:complexType name="videoAnalyzeType">
    <xs:sequence/>
    <xs:attribute name="pluginLibraryUri" type="xs:string" use="required"/>
    <xs:attribute name="pluginLibraryInternalPath" type="xs:string"/>
  </xs:complexType>
<xs:complexType name="videoProcessType">
    <xs:sequence>
      <xs:element minOccurs="0" name="incrustation" type="tns:incrustationType"/>
      <xs:element minOccurs="0" name="frameProcessing" type="tns:frameProcessingType"/>
    </xs:sequence>
  </xs:complexType>
<xs:complexType name="incrustationType">
    <xs:sequence>
      <xs:element minOccurs="0" name="textIncrustation" type="tns:textIncrustationType"/>
      <xs:element minOccurs="0" name="pictureIncrustation" type="tns:pictureIncrustationType"/>
    </xs:sequence>
    <xs:attribute name="opacity" type="xs:float"/>
    <xs:attribute name="posx" type="xs:float"/>
    <xs:attribute name="posy" type="xs:float"/>
    <xs:attribute name="halign" type="tns:horizontalAlignmentEnum"/>
    <xs:attribute name="valign" type="tns:verticalAlignmentEnum"/>
  </xs:complexType>
<xs:complexType name="textIncrustationType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="fontFamily" type="xs:string"/>
        <xs:attribute name="fontSize" type="xs:float"/>
        <xs:attribute name="fontBold" type="xs:boolean"/>
        <xs:attribute name="fontShadow" type="xs:boolean"/>
        <xs:attribute name="fontColor" type="xs:string"/>
        <xs:attribute name="fontShadowColor" type="xs:string"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
<xs:complexType name="pictureIncrustationType">
    <xs:sequence/>
    <xs:attribute name="pictureUri" type="xs:string"/>
    <xs:attribute name="pictureInternalLocalPath" type="xs:string"/>
    <xs:attribute name="width" type="xs:float"/>
    <xs:attribute name="height" type="xs:float"/>
  </xs:complexType>
<xs:complexType name="frameProcessingType">
    <xs:sequence/>
    <xs:attribute name="convertToGrayscale" type="xs:boolean"/>
  </xs:complexType>
<xs:complexType name="videoTranscodeType">
    <xs:sequence/>
    <xs:attribute name="forcecopy" type="xs:boolean"/>
    <xs:attribute name="codec" type="tns:videoCodecEnum"/>
    <xs:attribute name="avgbitrate" type="xs:long"/>
    <xs:attribute name="maxbitrate" type="xs:long"/>
    <xs:attribute name="framerate" type="xs:float"/>
    <xs:attribute name="framewidth" type="xs:int"/>
    <xs:attribute name="frameheight" type="xs:int"/>
    <xs:attribute name="iframeperiod" type="xs:long"/>
    <xs:attribute name="optionalArgs" type="xs:string"/>
  </xs:complexType>
<xs:complexType name="audioTranscodeType">
    <xs:sequence/>
    <xs:attribute name="forcecopy" type="xs:boolean"/>
    <xs:attribute name="codec" type="tns:audioCodecEnum"/>
    <xs:attribute name="avgbitrate" type="xs:long"/>
    <xs:attribute name="maxbitrate" type="xs:long"/>
    <xs:attribute name="channelcount" type="xs:int"/>
    <xs:attribute name="samplerate" type="xs:int"/>
    <xs:attribute name="optionalArgs" type="xs:string"/>
  </xs:complexType>
<xs:complexType name="manifestsType">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="manifest" nillable="true" type="tns:manifestType"/>
    </xs:sequence>
    <xs:attribute name="programId" type="xs:string" use="required"/>
    <xs:attribute name="resolution" type="xs:string" use="required"/>
    <xs:attribute name="bandwidth" type="xs:long" use="required"/>
    <xs:attribute name="codecs" type="xs:string" use="required"/>
    <xs:attribute name="allowCache" type="xs:boolean"/>
    <xs:attribute name="maxSegmentDuration" type="xs:long" use="required"/>
    <xs:attribute name="slidingWindowMaxSegmentCount" type="xs:long" use="required"/>
    <xs:attribute name="backupEnabled" type="xs:boolean"/>
  </xs:complexType>
<xs:complexType name="manifestType">
    <xs:sequence/>
    <xs:attribute name="type" type="tns:manifestTypeEnum"/>
    <xs:attribute name="extension" type="xs:string"/>
  </xs:complexType>
<xs:complexType name="drmInfoType">
    <xs:sequence/>
    <xs:attribute name="mode" type="tns:drmModeEnum" use="required"/>
    <xs:attribute name="contentid" type="xs:string"/>
    <xs:attribute name="cek" type="xs:string"/>
    <xs:attribute name="riurl" type="xs:string"/>
    <xs:attribute name="textualheader" type="xs:string"/>
  </xs:complexType>
<xs:complexType name="userdataType">
    <xs:sequence/>
    <xs:attribute name="key" type="xs:string" use="required"/>
    <xs:attribute name="value" type="xs:string" use="required"/>
  </xs:complexType>
<xs:simpleType name="fileformatEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Unknown/automatic file format"/>
      <xs:enumeration value="MP4"/>
      <xs:enumeration value="MOV"/>
      <xs:enumeration value="MP4-3GP"/>
      <xs:enumeration value="ASF"/>
      <xs:enumeration value="AVI"/>
      <xs:enumeration value="MP3"/>
      <xs:enumeration value="FLV"/>
      <xs:enumeration value="OGG"/>
      <xs:enumeration value="MPEG2TS"/>
      <xs:enumeration value="MPEG2TS-SEG"/>
      <xs:enumeration value="PDCF"/>
      <xs:enumeration value="MPEG1"/>
      <xs:enumeration value="RealMedia"/>
      <xs:enumeration value="DigitalVideo"/>
      <xs:enumeration value="Matroska"/>
      <xs:enumeration value="WEBM"/>
      <xs:enumeration value="FLAC"/>
      <xs:enumeration value="MPC"/>
      <xs:enumeration value="WAV"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="metadataCategoryEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Title"/>
      <xs:enumeration value="Author"/>
      <xs:enumeration value="Album"/>
      <xs:enumeration value="Copyright"/>
      <xs:enumeration value="Genre"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="langEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="fre"/>
      <xs:enumeration value="eng"/>
      <xs:enumeration value="bul"/>
      <xs:enumeration value="spa"/>
      <xs:enumeration value="cze"/>
      <xs:enumeration value="dan"/>
      <xs:enumeration value="ger"/>
      <xs:enumeration value="est"/>
      <xs:enumeration value="gre"/>
      <xs:enumeration value="ita"/>
      <xs:enumeration value="lav"/>
      <xs:enumeration value="lit"/>
      <xs:enumeration value="mlt"/>
      <xs:enumeration value="dut"/>
      <xs:enumeration value="pol"/>
      <xs:enumeration value="por"/>
      <xs:enumeration value="rum"/>
      <xs:enumeration value="slo"/>
      <xs:enumeration value="slv"/>
      <xs:enumeration value="fin"/>
      <xs:enumeration value="swe"/>
      <xs:enumeration value="hun"/>
      <xs:enumeration value="und"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="behaviorEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Keep"/>
      <xs:enumeration value="Set"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="mediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Audio"/>
      <xs:enumeration value="Video"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="horizontalAlignmentEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Left"/>
      <xs:enumeration value="Center"/>
      <xs:enumeration value="Right"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="verticalAlignmentEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Top"/>
      <xs:enumeration value="Center"/>
      <xs:enumeration value="Bottom"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="videoCodecEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Unknown/automatic video codec"/>
      <xs:enumeration value="MPEG4 Video Part2"/>
      <xs:enumeration value="MPEG4 Video AVC"/>
      <xs:enumeration value="H263 3GP Video"/>
      <xs:enumeration value="Windows Media Video 7"/>
      <xs:enumeration value="Windows Media Video 8"/>
      <xs:enumeration value="Windows Media Video 9"/>
      <xs:enumeration value="Flash Video 1"/>
      <xs:enumeration value="VP6"/>
      <xs:enumeration value="MPEG2 Video"/>
      <xs:enumeration value="MJPEG"/>
      <xs:enumeration value="Sorenson Video 3"/>
      <xs:enumeration value="MPEG1 Video"/>
      <xs:enumeration value="Real Video 4"/>
      <xs:enumeration value="DV Video"/>
      <xs:enumeration value="VP8"/>
      <xs:enumeration value="MSMPEG4V3"/>
      <xs:enumeration value="Theora"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="audioCodecEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Unknown/automatic audio codec"/>
      <xs:enumeration value="MPEG4 Audio AAC"/>
      <xs:enumeration value="AMR 3GP Audio"/>
      <xs:enumeration value="Windows Media Audio 1"/>
      <xs:enumeration value="Windows Media Audio 2"/>
      <xs:enumeration value="MPEG-1/2 Layer 3"/>
      <xs:enumeration value="MPEG-1/2 Layer 2"/>
      <xs:enumeration value="PCM U8"/>
      <xs:enumeration value="PCM U16BE"/>
      <xs:enumeration value="PCM U16LE"/>
      <xs:enumeration value="PCM U24BE"/>
      <xs:enumeration value="PCM U24LE"/>
      <xs:enumeration value="PCM U32BE"/>
      <xs:enumeration value="PCM U32LE"/>
      <xs:enumeration value="PCM S8"/>
      <xs:enumeration value="PCM S16BE"/>
      <xs:enumeration value="PCM S16LE"/>
      <xs:enumeration value="PCM S24BE"/>
      <xs:enumeration value="PCM S24LE"/>
      <xs:enumeration value="PCM S32BE"/>
      <xs:enumeration value="PCM S32LE"/>
      <xs:enumeration value="PCM F32BE"/>
      <xs:enumeration value="PCM F32LE"/>
      <xs:enumeration value="PCM F64BE"/>
      <xs:enumeration value="PCM F64LE"/>
      <xs:enumeration value="QDesign Music 2"/>
      <xs:enumeration value="Cooker"/>
      <xs:enumeration value="AC3"/>
      <xs:enumeration value="ADPCM IMA QT"/>
      <xs:enumeration value="Vorbis"/>
      <xs:enumeration value="FLAC"/>
      <xs:enumeration value="MPC7"/>
      <xs:enumeration value="MPC8"/>
      <xs:enumeration value="DTS"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="manifestTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="HLS"/>
      <xs:enumeration value="Smooth-Streaming"/>
      <xs:enumeration value="ADS"/>
      <xs:enumeration value="MPEG-DASH"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="drmModeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Disabled"/>
      <xs:enumeration value="Manual"/>
      <xs:enumeration value="Auto"/>
    </xs:restriction>
  </xs:simpleType>
<xs:simpleType name="useCaseEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="None"/>
      <xs:enumeration value="Copy"/>
      <xs:enumeration value="Concat"/>
      <xs:enumeration value="Split"/>
      <xs:enumeration value="Merge"/>
      <xs:enumeration value="Combine"/>
      <xs:enumeration value="CopyAllInOneOffline"/>
      <xs:enumeration value="CopyAllInOneOnTheFly"/>
      <xs:enumeration value="CopyAllInOneHttpStreaming"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ns1="http://www.resonate-mp4.com/medianate_edl" xmlns:tns="http://www.medianate.com/api/tasks" attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://www.medianate.com/api/tasks">
  <xs:import namespace="http://www.resonate-mp4.com/medianate_edl"/>
  <xs:element name="SimpleSource" type="tns:simpleSource"/>
  <xs:element name="SimpleTask" type="tns:simpleTask"/>
  <xs:element name="SourceMetadata" type="tns:sourceMetadata"/>
  <xs:element name="TaskDetail" type="tns:taskDetail"/>
  <xs:element name="cancel" type="tns:cancel"/>
  <xs:element name="cancelAll" type="tns:cancelAll"/>
  <xs:element name="cancelAllResponse" type="tns:cancelAllResponse"/>
  <xs:element name="cancelResponse" type="tns:cancelResponse"/>
  <xs:element name="createByEdl" type="tns:createByEdl"/>
  <xs:element name="createByEdlResponse" type="tns:createByEdlResponse"/>
  <xs:element name="createByProfile" type="tns:createByProfile"/>
  <xs:element name="createByProfileResponse" type="tns:createByProfileResponse"/>
  <xs:element name="findAll" type="tns:findAll"/>
  <xs:element name="findAllResponse" type="tns:findAllResponse"/>
  <xs:element name="getDetail" type="tns:getDetail"/>
  <xs:element name="getDetailResponse" type="tns:getDetailResponse"/>
  <xs:element name="getEdl" type="tns:getEdl"/>
  <xs:element name="getEdlResponse" type="tns:getEdlResponse"/>
  <xs:element name="getMacroState" type="tns:getMacroState"/>
  <xs:element name="getMacroStateResponse" type="tns:getMacroStateResponse"/>
  <xs:element name="getSourcesDiffusionUrls" type="tns:getSourcesDiffusionUrls"/>
  <xs:element name="getSourcesDiffusionUrlsResponse" type="tns:getSourcesDiffusionUrlsResponse"/>
  <xs:element name="producedAnalysisStepReport" type="tns:producedAnalysisStepReport"/>
  <xs:element name="reset" type="tns:reset"/>
  <xs:element name="resetAll" type="tns:resetAll"/>
  <xs:element name="resetAllResponse" type="tns:resetAllResponse"/>
  <xs:element name="resetResponse" type="tns:resetResponse"/>
  <xs:element name="search" type="tns:search"/>
  <xs:element name="searchResponse" type="tns:searchResponse"/>
  <xs:element name="sourceDiffusion" type="tns:sourceDiffusion"/>
  <xs:element name="start" type="tns:start"/>
  <xs:element name="startAll" type="tns:startAll"/>
  <xs:element name="startAllResponse" type="tns:startAllResponse"/>
  <xs:element name="startResponse" type="tns:startResponse"/>
  <xs:element name="taskPreview" type="tns:taskPreview"/>
  <xs:element name="taskSearchCriteria" type="tns:taskSearchCriteria"/>
  <xs:element name="taskSearchDTO" type="tns:taskSearchDTO"/>
  <xs:element name="updateTask" type="tns:updateTask"/>
  <xs:element name="updateTaskResponse" type="tns:updateTaskResponse"/>
  <xs:complexType name="getSourcesDiffusionUrls">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSourcesDiffusionUrlsResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:sourceDiffusion"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="sourceDiffusion">
    <xs:sequence>
      <xs:element minOccurs="0" name="diffusionUrl" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="start">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="startResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getEdl">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getEdlResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="sources">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="source" nillable="true">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element minOccurs="0" name="metadata" type="ns1:sourceMetadataType"/>
                      </xs:sequence>
                      <xs:attribute name="uri" type="xs:anyURI" use="required"/>
                      <xs:attribute name="localDownloadDirectory" type="xs:string"/>
                      <xs:attribute name="internalLocalPath" type="xs:string"/>
                      <xs:attribute name="beginTimecode" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="destination">
              <xs:complexType>
                <xs:sequence/>
                <xs:attribute name="uri" type="xs:anyURI" use="required"/>
                <xs:attribute name="internalLocalPath" type="xs:string"/>
                <xs:attribute name="fileformat" type="ns1:fileformatEnum"/>
                <xs:attribute name="muxerOptionalArgs" type="xs:string"/>
              </xs:complexType>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="hint" type="xs:boolean"/>
            <xs:element default="false" minOccurs="0" name="httpdownloadable" type="xs:boolean"/>
            <xs:element minOccurs="0" name="assetinformation">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="item" nillable="true" type="ns1:assetInformationItemType"/>
                </xs:sequence>
                <xs:attribute name="behavior" type="ns1:behaviorEnum" use="required"/>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="alternateinformation" type="ns1:alternateInformationType"/>
            <xs:element minOccurs="0" name="cut" type="ns1:cutType"/>
            <xs:element minOccurs="0" name="filters">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="excludebitraterange" nillable="true" type="ns1:bitrateRangeExclusionType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="excludelang" nillable="true" type="ns1:langExclusionType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="analyze">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="videotracks" type="ns1:videoAnalyzeType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="process" nillable="true">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="videotracks" type="ns1:videoProcessType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="transcode">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="videotracks" type="ns1:videoTranscodeType"/>
                  <xs:element name="audiotracks" type="ns1:audioTranscodeType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="streaming">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="manifests" type="ns1:manifestsType"/>
                </xs:sequence>
                <xs:attribute name="preferredSegmentDuration" type="xs:long" use="required"/>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="drm">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="videotracks" type="ns1:drmInfoType"/>
                  <xs:element minOccurs="0" name="audiotracks" type="ns1:drmInfoType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userdata" nillable="true" type="ns1:userdataType"/>
          </xs:sequence>
          <xs:attribute name="usecase" type="ns1:useCaseEnum" use="required"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDetail">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDetailResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:taskDetail"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="taskDetail">
    <xs:complexContent>
      <xs:extension base="tns:abstractTask">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="files" nillable="true" type="tns:producedFile"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="producedAnalysisReports" nillable="true" type="tns:producedAnalysis"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="abstractTask">
    <xs:sequence>
      <xs:element minOccurs="0" name="creation" type="xs:dateTime"/>
      <xs:element name="currentStateProgression" type="xs:int"/>
      <xs:element minOccurs="0" name="downloadEnd" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="downloadStart" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="failureReasonShort" type="xs:string"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="lastUpdate" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="macroState" type="xs:string"/>
      <xs:element minOccurs="0" name="ownerLogin" type="xs:string"/>
      <xs:element name="priority" type="xs:int"/>
      <xs:element minOccurs="0" name="processingEnd" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="processingNodeId" type="xs:long"/>
      <xs:element minOccurs="0" name="processingStart" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="state" type="xs:string"/>
      <xs:element minOccurs="0" name="uploadEnd" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="uploadStart" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="watchedFolderId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="producedFile">
    <xs:sequence>
      <xs:element name="fileDuration" type="xs:long"/>
      <xs:element name="fileSize" type="xs:long"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="md4HashHex" type="xs:string"/>
      <xs:element minOccurs="0" name="md5HashHex" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="metadata" nillable="true" type="tns:metadata"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="producedTrack" nillable="true" type="tns:producedTrack"/>
      <xs:element minOccurs="0" name="sha1HashHex" type="xs:string"/>
      <xs:element minOccurs="0" name="type" type="xs:string"/>
      <xs:element minOccurs="0" name="url" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="metadata">
    <xs:sequence>
      <xs:element minOccurs="0" name="key" type="xs:string"/>
      <xs:element minOccurs="0" name="value" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="producedTrack">
    <xs:sequence>
      <xs:element name="audioBitsPerSample" type="xs:long"/>
      <xs:element name="audioChannelCount" type="xs:long"/>
      <xs:element minOccurs="0" name="audioCodec" type="xs:string"/>
      <xs:element name="audioSamplePerFrame" type="xs:long"/>
      <xs:element name="audioSampleRate" type="xs:long"/>
      <xs:element minOccurs="0" name="drmContentId" type="xs:string"/>
      <xs:element name="drmEnabled" type="xs:boolean"/>
      <xs:element minOccurs="0" name="drmKeyHex" type="xs:string"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="mediaType" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="producedThumbnails" nillable="true" type="tns:producedThumbnail"/>
      <xs:element name="trackId" type="xs:long"/>
      <xs:element minOccurs="0" name="videoCodec" type="xs:string"/>
      <xs:element name="videoFrameRateDen" type="xs:long"/>
      <xs:element name="videoFrameRateNum" type="xs:long"/>
      <xs:element name="videoHeight" type="xs:long"/>
      <xs:element name="videoWidth" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="producedThumbnail">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="pts" type="xs:long"/>
      <xs:element name="size" type="xs:long"/>
      <xs:element minOccurs="0" name="url" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="producedAnalysis">
    <xs:sequence>
      <xs:element name="endReportSize" type="xs:long"/>
      <xs:element minOccurs="0" name="endReportUrl" type="xs:string"/>
      <xs:element minOccurs="0" name="exportedUserdataUrl" type="xs:string"/>
      <xs:element name="exportedUserdatatSize" type="xs:long"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="originalMediafileTrackId" type="xs:long"/>
      <xs:element minOccurs="0" name="originalMediafileUri" type="xs:string"/>
      <xs:element minOccurs="0" name="pluginLibraryUri" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="producedThumbnails" nillable="true" type="tns:producedThumbnail"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="stepReports" nillable="true" type="tns:producedAnalysisStepReport"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="producedAnalysisStepReport">
    <xs:sequence>
      <xs:element name="frameCtsUs" type="xs:long"/>
      <xs:element name="frameIndex" type="xs:long"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="reportSize" type="xs:long"/>
      <xs:element minOccurs="0" name="reportUrl" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createByEdl">
    <xs:sequence>
      <xs:element minOccurs="0" name="edl">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="sources">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="source" nillable="true">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element minOccurs="0" name="metadata" type="ns1:sourceMetadataType"/>
                      </xs:sequence>
                      <xs:attribute name="uri" type="xs:anyURI" use="required"/>
                      <xs:attribute name="localDownloadDirectory" type="xs:string"/>
                      <xs:attribute name="internalLocalPath" type="xs:string"/>
                      <xs:attribute name="beginTimecode" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="destination">
              <xs:complexType>
                <xs:sequence/>
                <xs:attribute name="uri" type="xs:anyURI" use="required"/>
                <xs:attribute name="internalLocalPath" type="xs:string"/>
                <xs:attribute name="fileformat" type="ns1:fileformatEnum"/>
                <xs:attribute name="muxerOptionalArgs" type="xs:string"/>
              </xs:complexType>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="hint" type="xs:boolean"/>
            <xs:element default="false" minOccurs="0" name="httpdownloadable" type="xs:boolean"/>
            <xs:element minOccurs="0" name="assetinformation">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="item" nillable="true" type="ns1:assetInformationItemType"/>
                </xs:sequence>
                <xs:attribute name="behavior" type="ns1:behaviorEnum" use="required"/>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="alternateinformation" type="ns1:alternateInformationType"/>
            <xs:element minOccurs="0" name="cut" type="ns1:cutType"/>
            <xs:element minOccurs="0" name="filters">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="excludebitraterange" nillable="true" type="ns1:bitrateRangeExclusionType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="excludelang" nillable="true" type="ns1:langExclusionType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="analyze">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="videotracks" type="ns1:videoAnalyzeType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="process" nillable="true">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="videotracks" type="ns1:videoProcessType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="transcode">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="videotracks" type="ns1:videoTranscodeType"/>
                  <xs:element name="audiotracks" type="ns1:audioTranscodeType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="streaming">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="manifests" type="ns1:manifestsType"/>
                </xs:sequence>
                <xs:attribute name="preferredSegmentDuration" type="xs:long" use="required"/>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="drm">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="videotracks" type="ns1:drmInfoType"/>
                  <xs:element minOccurs="0" name="audiotracks" type="ns1:drmInfoType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userdata" nillable="true" type="ns1:userdataType"/>
          </xs:sequence>
          <xs:attribute name="usecase" type="ns1:useCaseEnum" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="priority" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createByEdlResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:taskDetail"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="startAll">
    <xs:sequence>
      <xs:element name="allUsers" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="startAllResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="cancel">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="updateTask">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
      <xs:element minOccurs="0" name="edl">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="sources">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="source" nillable="true">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element minOccurs="0" name="metadata" type="ns1:sourceMetadataType"/>
                      </xs:sequence>
                      <xs:attribute name="uri" type="xs:anyURI" use="required"/>
                      <xs:attribute name="localDownloadDirectory" type="xs:string"/>
                      <xs:attribute name="internalLocalPath" type="xs:string"/>
                      <xs:attribute name="beginTimecode" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="destination">
              <xs:complexType>
                <xs:sequence/>
                <xs:attribute name="uri" type="xs:anyURI" use="required"/>
                <xs:attribute name="internalLocalPath" type="xs:string"/>
                <xs:attribute name="fileformat" type="ns1:fileformatEnum"/>
                <xs:attribute name="muxerOptionalArgs" type="xs:string"/>
              </xs:complexType>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="hint" type="xs:boolean"/>
            <xs:element default="false" minOccurs="0" name="httpdownloadable" type="xs:boolean"/>
            <xs:element minOccurs="0" name="assetinformation">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="item" nillable="true" type="ns1:assetInformationItemType"/>
                </xs:sequence>
                <xs:attribute name="behavior" type="ns1:behaviorEnum" use="required"/>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="alternateinformation" type="ns1:alternateInformationType"/>
            <xs:element minOccurs="0" name="cut" type="ns1:cutType"/>
            <xs:element minOccurs="0" name="filters">
              <xs:complexType>
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="excludebitraterange" nillable="true" type="ns1:bitrateRangeExclusionType"/>
                  <xs:element maxOccurs="unbounded" minOccurs="0" name="excludelang" nillable="true" type="ns1:langExclusionType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="analyze">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="videotracks" type="ns1:videoAnalyzeType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="process" nillable="true">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="videotracks" type="ns1:videoProcessType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="transcode">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="videotracks" type="ns1:videoTranscodeType"/>
                  <xs:element name="audiotracks" type="ns1:audioTranscodeType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="streaming">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="manifests" type="ns1:manifestsType"/>
                </xs:sequence>
                <xs:attribute name="preferredSegmentDuration" type="xs:long" use="required"/>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" name="drm">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="videotracks" type="ns1:drmInfoType"/>
                  <xs:element minOccurs="0" name="audiotracks" type="ns1:drmInfoType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="userdata" nillable="true" type="ns1:userdataType"/>
          </xs:sequence>
          <xs:attribute name="usecase" type="ns1:useCaseEnum" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="priority" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateTaskResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="search">
    <xs:sequence>
      <xs:element minOccurs="0" name="criteria" type="tns:taskSearchCriteria"/>
      <xs:element name="allUsers" type="xs:boolean"/>
      <xs:element name="pageMode" type="xs:boolean"/>
      <xs:element name="firstRow" type="xs:long"/>
      <xs:element name="maxRows" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="taskSearchCriteria">
    <xs:sequence>
      <xs:element minOccurs="0" name="endReportContains" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ids" nillable="true" type="xs:long"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="macroStates" nillable="true" type="tns:taskMacroState"/>
      <xs:element minOccurs="0" name="maxCreationDate" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="maxProcessingEnd" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="maxProcessingStart" type="xs:dateTime"/>
      <xs:element name="maxSourceLatitude" type="xs:double"/>
      <xs:element name="maxSourceLongitude" type="xs:double"/>
      <xs:element minOccurs="0" name="maxSourceTastakenDateTime" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="minCreationDate" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="minLastUpdateTime" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="minProcessingEnd" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="minProcessingStart" type="xs:dateTime"/>
      <xs:element name="minSourceLatitude" type="xs:double"/>
      <xs:element name="minSourceLongitude" type="xs:double"/>
      <xs:element minOccurs="0" name="minSourceTakenDateTime" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="stepReportContains" type="xs:string"/>
      <xs:element minOccurs="0" name="watchedFolderId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="searchResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:taskSearchDTO"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="taskSearchDTO">
    <xs:sequence>
      <xs:element minOccurs="0" name="currentTimestamp" type="xs:dateTime"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="taskPreviewList" nillable="true" type="tns:taskPreview"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="taskPreview">
    <xs:complexContent>
      <xs:extension base="tns:abstractTask">
        <xs:sequence>
          <xs:element minOccurs="0" name="fileformat" type="xs:string"/>
          <xs:element name="producedAnalysisReportsCount" type="xs:int"/>
          <xs:element name="producedFilesCount" type="xs:int"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="sourcesPreview" nillable="true" type="xs:string"/>
          <xs:element minOccurs="0" name="usecase" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="findAll">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="findAllResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:taskDetail"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="reset">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="resetResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="resetAll">
    <xs:sequence>
      <xs:element name="allUsers" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="resetAllResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="cancelAll">
    <xs:sequence>
      <xs:element name="allUsers" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="cancelAllResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="createByProfile">
    <xs:sequence>
      <xs:element name="profileId" type="xs:long"/>
      <xs:element minOccurs="0" name="taskParameters" type="tns:simpleTask"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="simpleTask">
    <xs:sequence>
      <xs:element name="beginTs" type="xs:long"/>
      <xs:element minOccurs="0" name="destination" type="xs:string"/>
      <xs:element name="endTs" type="xs:long"/>
      <xs:element minOccurs="0" name="priority" type="xs:int"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="profilePlaceHolders" nillable="true" type="tns:placeHolder"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="sources" nillable="true" type="tns:simpleSource"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="placeHolder">
    <xs:sequence>
      <xs:element minOccurs="0" name="key" type="xs:string"/>
      <xs:element minOccurs="0" name="value" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="simpleSource">
    <xs:sequence>
      <xs:element minOccurs="0" name="beginTimecode" type="xs:string"/>
      <xs:element minOccurs="0" name="localDownloadDirectory" type="xs:string"/>
      <xs:element minOccurs="0" name="metadata" type="tns:sourceMetadata"/>
      <xs:element minOccurs="0" name="url" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="sourceMetadata">
    <xs:sequence>
      <xs:element minOccurs="0" name="takenDateTime" type="xs:dateTime"/>
      <xs:element minOccurs="0" name="takenPostion" type="tns:geographicPosition"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="geographicPosition">
    <xs:sequence>
      <xs:element name="latitude" type="xs:double"/>
      <xs:element name="longitude" type="xs:double"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="createByProfileResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:taskDetail"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getMacroState">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getMacroStateResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="taskMacroState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="EDITION"/>
      <xs:enumeration value="PROCESSING"/>
      <xs:enumeration value="FAILED"/>
      <xs:enumeration value="COMPLETED"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="EdlParseException" type="tns:EdlParseException"/>
  <xs:complexType name="EdlParseException">
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="TaskNotFoundException" type="tns:TaskNotFoundException"/>
  <xs:complexType name="TaskNotFoundException">
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="EdlSerializationException" type="tns:EdlSerializationException"/>
  <xs:complexType name="EdlSerializationException">
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="SchlitterException" type="tns:SchlitterException"/>
  <xs:complexType name="SchlitterException">
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="TaskValidationException" type="tns:TaskValidationException"/>
  <xs:complexType name="TaskValidationException">
    <xs:sequence/>
  </xs:complexType>
  <xs:element name="TaskStateTransitionException" type="tns:TaskStateTransitionException"/>
  <xs:complexType name="TaskStateTransitionException">
    <xs:sequence/>
  </xs:complexType>
</xs:schema>
  </wsdl:types>
  <wsdl:message name="cancelAllResponse">
    <wsdl:part name="parameters" element="tns:cancelAllResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="TaskNotFoundException">
    <wsdl:part name="TaskNotFoundException" element="tns:TaskNotFoundException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchResponse">
    <wsdl:part name="parameters" element="tns:searchResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="TaskStateTransitionException">
    <wsdl:part name="TaskStateTransitionException" element="tns:TaskStateTransitionException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="findAll">
    <wsdl:part name="parameters" element="tns:findAll">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDetail">
    <wsdl:part name="parameters" element="tns:getDetail">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="EdlSerializationException">
    <wsdl:part name="EdlSerializationException" element="tns:EdlSerializationException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSourcesDiffusionUrlsResponse">
    <wsdl:part name="parameters" element="tns:getSourcesDiffusionUrlsResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="start">
    <wsdl:part name="parameters" element="tns:start">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="resetAll">
    <wsdl:part name="parameters" element="tns:resetAll">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSourcesDiffusionUrls">
    <wsdl:part name="parameters" element="tns:getSourcesDiffusionUrls">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createByProfileResponse">
    <wsdl:part name="parameters" element="tns:createByProfileResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMacroState">
    <wsdl:part name="parameters" element="tns:getMacroState">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getEdl">
    <wsdl:part name="parameters" element="tns:getEdl">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDetailResponse">
    <wsdl:part name="parameters" element="tns:getDetailResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="startAll">
    <wsdl:part name="parameters" element="tns:startAll">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createByProfile">
    <wsdl:part name="parameters" element="tns:createByProfile">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancel">
    <wsdl:part name="parameters" element="tns:cancel">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createByEdl">
    <wsdl:part name="parameters" element="tns:createByEdl">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="startResponse">
    <wsdl:part name="parameters" element="tns:startResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="resetAllResponse">
    <wsdl:part name="parameters" element="tns:resetAllResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelAll">
    <wsdl:part name="parameters" element="tns:cancelAll">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelResponse">
    <wsdl:part name="parameters" element="tns:cancelResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateTaskResponse">
    <wsdl:part name="parameters" element="tns:updateTaskResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="startAllResponse">
    <wsdl:part name="parameters" element="tns:startAllResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="search">
    <wsdl:part name="parameters" element="tns:search">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getEdlResponse">
    <wsdl:part name="parameters" element="tns:getEdlResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="reset">
    <wsdl:part name="parameters" element="tns:reset">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="resetResponse">
    <wsdl:part name="parameters" element="tns:resetResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createByEdlResponse">
    <wsdl:part name="parameters" element="tns:createByEdlResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="EdlParseException">
    <wsdl:part name="EdlParseException" element="tns:EdlParseException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="TaskValidationException">
    <wsdl:part name="TaskValidationException" element="tns:TaskValidationException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMacroStateResponse">
    <wsdl:part name="parameters" element="tns:getMacroStateResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="findAllResponse">
    <wsdl:part name="parameters" element="tns:findAllResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="SchlitterException">
    <wsdl:part name="SchlitterException" element="tns:SchlitterException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateTask">
    <wsdl:part name="parameters" element="tns:updateTask">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name="TaskEndpoint">
    <wsdl:operation name="getSourcesDiffusionUrls">
      <wsdl:input name="getSourcesDiffusionUrls" message="tns:getSourcesDiffusionUrls">
    </wsdl:input>
      <wsdl:output name="getSourcesDiffusionUrlsResponse" message="tns:getSourcesDiffusionUrlsResponse">
    </wsdl:output>
      <wsdl:fault name="TaskNotFoundException" message="tns:TaskNotFoundException">
    </wsdl:fault>
      <wsdl:fault name="EdlParseException" message="tns:EdlParseException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="start">
      <wsdl:input name="start" message="tns:start">
    </wsdl:input>
      <wsdl:output name="startResponse" message="tns:startResponse">
    </wsdl:output>
      <wsdl:fault name="EdlParseException" message="tns:EdlParseException">
    </wsdl:fault>
      <wsdl:fault name="EdlSerializationException" message="tns:EdlSerializationException">
    </wsdl:fault>
      <wsdl:fault name="SchlitterException" message="tns:SchlitterException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getEdl">
      <wsdl:input name="getEdl" message="tns:getEdl">
    </wsdl:input>
      <wsdl:output name="getEdlResponse" message="tns:getEdlResponse">
    </wsdl:output>
      <wsdl:fault name="TaskNotFoundException" message="tns:TaskNotFoundException">
    </wsdl:fault>
      <wsdl:fault name="EdlParseException" message="tns:EdlParseException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDetail">
      <wsdl:input name="getDetail" message="tns:getDetail">
    </wsdl:input>
      <wsdl:output name="getDetailResponse" message="tns:getDetailResponse">
    </wsdl:output>
      <wsdl:fault name="TaskNotFoundException" message="tns:TaskNotFoundException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createByEdl">
      <wsdl:input name="createByEdl" message="tns:createByEdl">
    </wsdl:input>
      <wsdl:output name="createByEdlResponse" message="tns:createByEdlResponse">
    </wsdl:output>
      <wsdl:fault name="TaskValidationException" message="tns:TaskValidationException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="startAll">
      <wsdl:input name="startAll" message="tns:startAll">
    </wsdl:input>
      <wsdl:output name="startAllResponse" message="tns:startAllResponse">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="cancel">
      <wsdl:input name="cancel" message="tns:cancel">
    </wsdl:input>
      <wsdl:output name="cancelResponse" message="tns:cancelResponse">
    </wsdl:output>
      <wsdl:fault name="TaskNotFoundException" message="tns:TaskNotFoundException">
    </wsdl:fault>
      <wsdl:fault name="TaskStateTransitionException" message="tns:TaskStateTransitionException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateTask">
      <wsdl:input name="updateTask" message="tns:updateTask">
    </wsdl:input>
      <wsdl:output name="updateTaskResponse" message="tns:updateTaskResponse">
    </wsdl:output>
      <wsdl:fault name="TaskNotFoundException" message="tns:TaskNotFoundException">
    </wsdl:fault>
      <wsdl:fault name="TaskStateTransitionException" message="tns:TaskStateTransitionException">
    </wsdl:fault>
      <wsdl:fault name="EdlSerializationException" message="tns:EdlSerializationException">
    </wsdl:fault>
      <wsdl:fault name="SchlitterException" message="tns:SchlitterException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="search">
      <wsdl:input name="search" message="tns:search">
    </wsdl:input>
      <wsdl:output name="searchResponse" message="tns:searchResponse">
    </wsdl:output>
      <wsdl:fault name="TaskValidationException" message="tns:TaskValidationException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="findAll">
      <wsdl:input name="findAll" message="tns:findAll">
    </wsdl:input>
      <wsdl:output name="findAllResponse" message="tns:findAllResponse">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="reset">
      <wsdl:input name="reset" message="tns:reset">
    </wsdl:input>
      <wsdl:output name="resetResponse" message="tns:resetResponse">
    </wsdl:output>
      <wsdl:fault name="TaskNotFoundException" message="tns:TaskNotFoundException">
    </wsdl:fault>
      <wsdl:fault name="TaskStateTransitionException" message="tns:TaskStateTransitionException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="resetAll">
      <wsdl:input name="resetAll" message="tns:resetAll">
    </wsdl:input>
      <wsdl:output name="resetAllResponse" message="tns:resetAllResponse">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="cancelAll">
      <wsdl:input name="cancelAll" message="tns:cancelAll">
    </wsdl:input>
      <wsdl:output name="cancelAllResponse" message="tns:cancelAllResponse">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createByProfile">
      <wsdl:input name="createByProfile" message="tns:createByProfile">
    </wsdl:input>
      <wsdl:output name="createByProfileResponse" message="tns:createByProfileResponse">
    </wsdl:output>
      <wsdl:fault name="TaskValidationException" message="tns:TaskValidationException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getMacroState">
      <wsdl:input name="getMacroState" message="tns:getMacroState">
    </wsdl:input>
      <wsdl:output name="getMacroStateResponse" message="tns:getMacroStateResponse">
    </wsdl:output>
      <wsdl:fault name="TaskNotFoundException" message="tns:TaskNotFoundException">
    </wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="TaskEndpointServiceSoapBinding" type="tns:TaskEndpoint">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getSourcesDiffusionUrls">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSourcesDiffusionUrls">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSourcesDiffusionUrlsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="TaskNotFoundException">
        <soap:fault name="TaskNotFoundException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="EdlParseException">
        <soap:fault name="EdlParseException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="start">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="start">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="startResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="EdlParseException">
        <soap:fault name="EdlParseException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="EdlSerializationException">
        <soap:fault name="EdlSerializationException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SchlitterException">
        <soap:fault name="SchlitterException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getEdl">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getEdl">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getEdlResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="TaskNotFoundException">
        <soap:fault name="TaskNotFoundException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="EdlParseException">
        <soap:fault name="EdlParseException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDetail">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getDetail">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDetailResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="TaskNotFoundException">
        <soap:fault name="TaskNotFoundException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createByEdl">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="createByEdl">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createByEdlResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="TaskValidationException">
        <soap:fault name="TaskValidationException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="startAll">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="startAll">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="startAllResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="cancel">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="cancel">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="TaskNotFoundException">
        <soap:fault name="TaskNotFoundException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="TaskStateTransitionException">
        <soap:fault name="TaskStateTransitionException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateTask">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="updateTask">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateTaskResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="TaskNotFoundException">
        <soap:fault name="TaskNotFoundException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="TaskStateTransitionException">
        <soap:fault name="TaskStateTransitionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="EdlSerializationException">
        <soap:fault name="EdlSerializationException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SchlitterException">
        <soap:fault name="SchlitterException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="search">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="search">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="searchResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="TaskValidationException">
        <soap:fault name="TaskValidationException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="findAll">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="findAll">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="findAllResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="reset">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="reset">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="resetResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="TaskNotFoundException">
        <soap:fault name="TaskNotFoundException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="TaskStateTransitionException">
        <soap:fault name="TaskStateTransitionException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="resetAll">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="resetAll">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="resetAllResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="cancelAll">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="cancelAll">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelAllResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createByProfile">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="createByProfile">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createByProfileResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="TaskValidationException">
        <soap:fault name="TaskValidationException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getMacroState">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getMacroState">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getMacroStateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="TaskNotFoundException">
        <soap:fault name="TaskNotFoundException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="TaskEndpointService">
    <wsdl:port name="TaskEndpointImplPort" binding="tns:TaskEndpointServiceSoapBinding">
      <soap:address location="to_be_overridden_Add_?wsdl_to_the_endpoint_url_to_get_a_WSDL_with_actual_endpoint"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
